const CACHE_NAME="rk-groups-v2.0.0",STATIC_CACHE="rk-groups-static-v2.0.0",DYNAMIC_CACHE="rk-groups-dynamic-v2.0.0",STATIC_ASSETS=["/assets/css/mui.min.css","/sw.min.js","/favicon.ico","/manifest.json","/offline/"],DYNAMIC_ROUTES=["/","/companies/","/Calc/","/sitemap/","/terms/","/privacy/","/contact/"];function cacheFirst(n){return caches.match(n).then(function(e){return e||fetch(n).then(function(e){if(200===e.status){const t=e.clone();caches.open(STATIC_CACHE).then(function(e){e.put(n,t)})}return e}).catch(function(){if(n.url.includes("mui.min.css"))return caches.match("/assets/css/mui.min.css")})})}function networkFirst(n){return fetch(n).then(function(e){if(200===e.status){const t=e.clone();caches.open(DYNAMIC_CACHE).then(function(e){e.put(n,t)})}return e}).catch(function(){return caches.match(n).then(function(e){return e||("navigate"===n.mode?caches.match("/offline/"):void 0)})})}function staleWhileRevalidate(n){return caches.match(n).then(function(e){const t=fetch(n).then(function(e){if(200===e.status){const t=e.clone();caches.open(DYNAMIC_CACHE).then(function(e){e.put(n,t)})}return e}).catch(function(){return e});return e||t})}function isStaticAsset(n){const e=n.url;return e.includes(".css")||e.includes(".js")||e.includes(".ico")||e.includes(".png")||e.includes(".jpg")||e.includes(".jpeg")||e.includes(".gif")||e.includes(".svg")||e.includes(".woff")||e.includes(".woff2")||e.includes(".ttf")||e.includes(".eot")||e.includes("manifest.json")}function isDynamicRoute(n){const e=n.url;return e.includes(".html")||e.includes("/")&&!e.includes(".")}function isAPIRequest(n){return n.url.includes("/api/")}function doBackgroundSync(){console.log("[SW] Background sync triggered")}self.addEventListener("install",function(n){console.log("[SW] Installing service worker"),n.waitUntil(caches.open(STATIC_CACHE).then(function(n){return console.log("[SW] Caching static assets"),Promise.allSettled(STATIC_ASSETS.map(e=>n.add(e).catch(n=>(console.warn("[SW] Failed to cache:",e,n),Promise.resolve()))))}).then(()=>self.skipWaiting()))}),self.addEventListener("activate",function(n){console.log("[SW] Activating service worker"),n.waitUntil(caches.keys().then(function(n){return Promise.all(n.map(function(n){if(n!==STATIC_CACHE&&n!==DYNAMIC_CACHE)return console.log("[SW] Deleting old cache:",n),caches.delete(n)}))}).then(()=>self.clients.claim()))}),self.addEventListener("fetch",function(n){const{request:e}=n,t=new URL(e.url);"GET"===e.method&&t.origin===location.origin&&(isStaticAsset(e)?n.respondWith(cacheFirst(e)):isDynamicRoute(e)?n.respondWith(networkFirst(e)):isAPIRequest(e)?n.respondWith(fetch(e)):n.respondWith(staleWhileRevalidate(e)))}),self.addEventListener("sync",function(n){"background-sync"===n.tag&&n.waitUntil(doBackgroundSync())});