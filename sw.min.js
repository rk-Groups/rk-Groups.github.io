const CACHE_NAME="rk-groups-v2.0.0",STATIC_CACHE="rk-groups-static-v2.0.0",DYNAMIC_CACHE="rk-groups-dynamic-v2.0.0",STATIC_ASSETS=["/assets/css/mui.min.css","/sw.min.js","/favicon.ico","/manifest.json","/offline/","https://fonts.googleapis.com/icon?family=Material+Icons&display=swap"],DYNAMIC_ROUTES=["/","/companies/","/Calc/","/sitemap/","/terms/","/privacy/","/contact/"];function cacheFirst(n){return caches.match(n).then(function(t){return t||fetch(n).then(function(t){if(200===t.status){const e=t.clone();caches.open(STATIC_CACHE).then(function(t){t.put(n,e)})}return t}).catch(function(){if(n.url.includes("mui.min.css"))return caches.match("/assets/css/mui.min.css")})})}function networkFirst(n){return fetch(n).then(function(t){if(200===t.status){const e=t.clone();caches.open(DYNAMIC_CACHE).then(function(t){t.put(n,e)})}return t}).catch(function(){return caches.match(n).then(function(t){return t||("navigate"===n.mode?caches.match("/offline/"):void 0)})})}function staleWhileRevalidate(n){return caches.match(n).then(function(t){const e=fetch(n).then(function(t){if(200===t.status){const e=t.clone();caches.open(DYNAMIC_CACHE).then(function(t){t.put(n,e)})}return t}).catch(function(){return t});return t||e})}function isStaticAsset(n){const t=n.url;return t.includes(".css")||t.includes(".js")||t.includes(".ico")||t.includes("fonts.googleapis.com")}function isDynamicRoute(n){const t=n.url;return t.includes(".html")||t.includes("/")&&!t.includes(".")}function isAPIRequest(n){return n.url.includes("/api/")}function doBackgroundSync(){console.log("[SW] Background sync triggered")}self.addEventListener("install",function(n){console.log("[SW] Installing service worker"),n.waitUntil(caches.open(STATIC_CACHE).then(function(n){return console.log("[SW] Caching static assets"),n.addAll(STATIC_ASSETS)}).then(()=>self.skipWaiting()))}),self.addEventListener("activate",function(n){console.log("[SW] Activating service worker"),n.waitUntil(caches.keys().then(function(n){return Promise.all(n.map(function(n){if(n!==STATIC_CACHE&&n!==DYNAMIC_CACHE)return console.log("[SW] Deleting old cache:",n),caches.delete(n)}))}).then(()=>self.clients.claim()))}),self.addEventListener("fetch",function(n){const{request:t}=n,e=new URL(t.url);"GET"===t.method&&(e.origin===location.origin||e.origin.includes("fonts.googleapis.com"))&&(isStaticAsset(t)?n.respondWith(cacheFirst(t)):isDynamicRoute(t)?n.respondWith(networkFirst(t)):isAPIRequest(t)?n.respondWith(fetch(t)):n.respondWith(staleWhileRevalidate(t)))}),self.addEventListener("sync",function(n){"background-sync"===n.tag&&n.waitUntil(doBackgroundSync())});