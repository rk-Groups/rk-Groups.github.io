name: Jekyll Docker Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.md'
      - '**/*.html'
      - '**/*.js'
      - '**/*.css'
      - '**/*.yml'
      - '**/*.yaml'
      - 'Gemfile*'
      - 'package*.json'
      - 'Dockerfile*'
      - '.dockerignore'
      - '.github/workflows/jekyll-docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.md'
      - '**/*.html'
      - '**/*.js'
      - '**/*.css'
      - '**/*.yml'
      - '**/*.yaml'
      - 'Gemfile*'
      - 'package*.json'
      - 'Dockerfile*'
      - '.dockerignore'
      - '.github/workflows/jekyll-docker.yml'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to build'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image with Jekyll site
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - dockerfile: ./Dockerfile.jekyll
            context: .
            platforms: linux/amd64,linux/arm64
          - dockerfile: ./Dockerfile.builder
            context: .
            platforms: linux/amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ inputs.tag }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            JEKYLL_ENV=production
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: '${{ steps.build-and-push.outputs.digest }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Test the built Docker image
  test-docker:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and test Docker image
        run: |
          # Pull the image built in the previous job
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Run basic health checks
          docker run --rm -d --name test-site -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Wait for container to start
          sleep 10

          # Test basic connectivity
          curl -f http://localhost:8080/ || (docker logs test-site && exit 1)

          # Test key pages
          curl -f http://localhost:8080/companies/ || (docker logs test-site && exit 1)
          curl -f http://localhost:8080/Calc/ || (docker logs test-site && exit 1)

          # Cleanup
          docker stop test-site

  # Deploy to staging/production (if configured)
  deploy:
    needs: [build-and-push, test-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Deploy notification
        run: |
          echo "ðŸš€ Docker image built and tested successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Ready for deployment to your container platform"